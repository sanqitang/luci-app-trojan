#on: 
#  release:
#    types:
#      - created
on:
  repository_dispatch:
    types: [trojan,sshtrojan]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'trojan'
        required: false
        default: 'false'



name: luci-app-trojan
jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      URL: https://archive.openwrt.org/releases/19.07.3/targets/kirkwood/generic/openwrt-sdk-19.07.3-kirkwood_gcc-7.5.0_musl_eabi.Linux-x86_64.tar.xz      REPF: ${{ github.repository }}
      PKGN: ${{ 'luci-app-trojan' }}
      FILE_NAME: luci-app-trojan
      UPLOAD_RELEASE: true

    steps:

    - name: TG notification #TG推送
      run: curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${{ env.FILE_NAME }}Start compiling"


    - name: Checkout - ${{ github.ref }}
      uses: actions/checkout@v1
     
    - name: Checkout - code
      run: |
          tag_name="${GITHUB_REF##*/}"
          echo Tag $tag_name
          echo "TAG_NAME=${tag_name}" >> $GITHUB_ENV
          
    - name: Prepare SDK ENV
      run: |
        wget -q "${URL}"
        tar xJf openwrt-sdk-*.tar.xz -C ../
        mv -f "${GITHUB_WORKSPACE}" ../src
        mv ../openwrt-sdk-* "${GITHUB_WORKSPACE}"

    - name: Install dependencies
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion git-core gcc-multilib libelf-dev autoconf automake libtool
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Prepare targets
      id: po2lmo
      run: |
        REP=$(basename "${REPF}")
        mv -vf ../src "package/${REP}"
        test -d "package/${REP}/tools/po2lmo"

    - name: Prebuild po2lmo host tool
      if: success()
      run: |
        REP=$(basename "${REPF}")
        pushd "package/${REP}/tools/po2lmo"
        make && sudo make install

    - name: Load custom configuration
      env:
        DEBIAN_FRONTEND: noninteractive
        CONFIG_FILE: '.config'
      run: |
        REP=$(basename "${REPF}")
        [ -e "package/${REP}/${CONFIG_FILE}" ] && mv "${CONFIG}" .config
        make defconfig

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'sshtrojan')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}


    - name: Build target
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        make package/${PKGN}/compile -j$(nproc) V=s
        mkdir ../bin
        find bin/ -type f -name "*${PKGN}*" | xargs -t -i mv -vf {} ../bin
        
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
          draft: true
          name: ${{ env.TAG_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          files: ../bin/*.ipk
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    

    - name: TG notification #TG推送
    #  if: steps.organize.outputs.status == 'success' && !cancelled()
      run: curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${{ env.FILE_NAME }}release published - compiling completed\n${{ env.useVersionInfo }}"    
